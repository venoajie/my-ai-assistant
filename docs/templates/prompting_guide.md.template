# AI Assistant: Prompting Best Practices Guide

This guide provides best practices and principles for writing effective prompts for the AI Assistant. Following these guidelines will lead to more reliable, predictable, and powerful results.

### The Core Principle: You Are Briefing an Expert, Not Chatting with a Friend

Your goal is to provide a clear, unambiguous "mission briefing" to a specialized agent. The more your prompt resembles a well-written ticket in a project management system, the better your results will be.

---

## A Note on AI Models & API Keys

The AI Assistant does not run a model on your local machine. It acts as an intelligent orchestrator that connects to powerful external Large Language Models (LLMs) through their APIs.

{{DEFAULT_MODELS_INFO}}

---

## The Golden Rule: Always Start with a Persona

The single most important factor for achieving high-quality results is to **use the right persona for the job**. The persona system is the foundation of this application's power.

-   **Why?** Personas are pre-programmed with a specific role, a core philosophy, and a structured operational protocol. Using `domains/programming/csa-1` doesn't just tell the AI to be a systems architect; it forces it to follow a proven, multi-step process for architectural tasks, leading to far more consistent and robust outputs than a generic prompt.

-   **Action:** Before writing a prompt, run `ai --list-personas` to find the best specialist for your task.

---

## Do's: The Keys to Success

*   **DO State the Goal First and Clearly.**
    Start your prompt with the most important outcome.
    *   **Good:** `ai --persona domains/programming/csa-1 "<ACTION>Refactor the attached database.py to use a connection pool.</ACTION>"`
    *   **Bad:** `ai --persona domains/programming/csa-1 "So, I was looking at our database code, and I think it's a bit slow. Maybe we could make it better? I was thinking about connection pooling..."`

*   **DO Use the `<ACTION>` Tag and Two-Stage Workflow for Any Changes.**
    For any task that modifies files or Git, you **MUST** use the `--output-dir` flag. The system will automatically warn you if your prompt contains risky keywords (such as {{RISKY_KEYWORDS_LIST}}) without this flag. This is the standardized pattern for declaring a high-risk operation.
    *   **Best Practice:**
        ```bash
        ai --persona domains/programming/csa-1 --output-dir ./my_run \
          "<ACTION>Generate a plan to refactor the database connection logic.</ACTION>"
        ```
    *   **Why?** This leverages the system's best features for safety and resilience. It also provides a stronger signal to the AI and allows the system's pre-flight checks to provide better safety reminders.

*   **DO Provide All Necessary Context with `-f` Flags.**
    The AI cannot see your file system. If a change in `kernel.py` might affect `planner.py`, attach both. The more relevant context you provide, the better the AI's solution will be.

*   **DO Be Specific and Explicit in Your Instructions.**
    Use lists, numbered steps, and strong verbs. If you want a specific branch name or commit message format, state it exactly.
    *   **Good:** `"1. Create a new branch named 'feature/user-auth-cache'. 2. Modify auth.py to add Redis caching to the get_user function. 3. Commit the change with the message 'feat(auth): add caching to get_user'."`
    *   **Bad:** `"Add caching and make a branch."`
    
## Don'ts: Common Pitfalls to Avoid

*   **DON'T Be Vague or Conversational.**
    Avoid ambiguity. The AI will take your instructions literally. Phrases like "make it better," "clean this up," or "I think maybe" lead to unpredictable results.

*   **DON'T Give the AI Large Batch-Processing Tasks in a Single Prompt.**
    This is the most common cause of complex failures. The AI's context window is finite. If you provide too many files or too much text, the context will be truncated, and the AI will generate a plausible but **incomplete** plan based on the partial information it received.
    *   **Bad (Guaranteed to Fail):** A single `ai` command that attaches 18 files and asks the AI to modify all of them.
    *   **Good (Robust and Scalable):** Use a shell script to orchestrate multiple, small, focused calls to the AI, processing one file at a time. This is the exact pattern used by the most successful and resilient automation scripts.
        ```bash
        #!/bin/bash
        set -e # Exit immediately if any command fails
        
        files_to_process=(file1.md file2.md ...)
        
        for file in "${files_to_process[@]}"; do
          echo "Processing $file..."
          output_dir="./run_$(basename "$file")"
          
          # Generate the plan for a SINGLE file
          ai --persona domains/programming/dca-1 --output-dir "$output_dir" \
             -f "$file" "<ACTION>Add a description to this file and commit it.</ACTION>"
          
          # Execute the plan for that SINGLE file
          ai-execute "$output_dir" --confirm
        done
        ```
    *   **Key Takeaway:** For batch processing, use a shell script as the **"conductor"** to orchestrate multiple, small, focused calls to the AI **"specialist."**

*   **DON'T Assume the AI Remembers Things Outside the Current Context.**
    Unless you are using a `--session`, the AI has no memory of past runs. Each command is stateless. If a task requires knowledge from a previous run, you must either use a session or re-attach the relevant files.

---

## Automated Prompt Analysis

To help you follow these best practices, the AI Assistant includes a built-in prompt analyzer that runs before every command. It will provide non-halting warnings and suggestions in your terminal if your prompt violates a known best practice.

This system is governed by the following rules:

{{PROMPT_ANALYZER_RULES_LIST}}