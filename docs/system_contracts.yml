# docs/system_contracts.yml
# Version: 1.5
# Description: This file is the canonical, machine-readable data dictionary for the AI Assistant.
# It defines the schema and purpose of all major internal data contracts and transient process artifacts.

# SECTION 1: PERSISTENT DATA CONTRACTS
# These contracts define the structure of data that is fundamental to the
# long-term operation and state of the application. They represent the core,
# persistent data models of the system.
persistent_contracts:
  - name: Persona File
    path: "src/ai_assistant/personas/**/*.persona.md"
    type: File (Markdown with YAML Frontmatter)
    description: "The source of truth for an AI agent's identity, protocol, and capabilities. It is the core component of the Persona-First architecture."
    schema:
      - field: frontmatter
        type: YAML
        description: "Contains structured metadata like alias, title, and inheritance rules, governed by persona_config.yml."
      - field: body
        type: Markdown (with custom XML-style tags)
        description: "Contains the persona's core philosophy, directives, and operational protocol in a semi-structured format."

  - name: Session History
    path: ".ai_sessions/session_*.json"
    type: JSON File
    description: "A chronological log of a single conversation between a user and the AI assistant. Managed by the SessionManager."
    schema:
      - field: role
        type: string
        description: "The originator of the message (e.g., 'user', 'model', 'system_error')."
      - field: content
        type: string
        description: "The textual content of the message."

  - name: RAG Index
    path: ".ai_rag_index/"
    type: ChromaDB Vector Store
    description: "The project-specific knowledge base for the Retrieval-Augmented Generation (RAG) pipeline. It stores embeddings of source code and documentation, allowing the assistant to retrieve relevant context automatically."
    schema:
      - field: state.json
        type: JSON
        description: "Maintains a cache of file hashes to avoid re-indexing unchanged files."
      - field: chromadb/
        type: Directory
        description: "The underlying vector database files managed by ChromaDB."

  - name: Execution Plan
    source: Planner
    type: In-Memory Python List of Dictionaries
    description: "The AI-generated, structured plan of tool calls to be executed by the Kernel or packaged by the Executor. This is the primary internal data contract for agentic action."
    schema:
      - field: thought
        type: string
        description: "The AI's rationale for choosing the tool and arguments."
      - field: tool_name
        type: string
        description: "The name of the tool to be executed, which must exist in the TOOL_REGISTRY."
      - field: args
        type: dict
        description: "A dictionary of arguments to be passed to the tool."
      - field: condition
        type: dict (optional)
        description: "A block that makes the step's execution conditional on the output of a previous step."

  - name: Output Package Manifest
    path: "[output_dir]/manifest.json"
    type: JSON File
    description: "The machine-readable 'blueprint for action' generated in Output-First mode. It is the single source of truth for the `ai-execute` script, acting as the formal contract between the 'thinking' and 'doing' parts of the system."
    schema_definition:
      type: object
      required: ["version", "sessionId", "generated_by", "actions"]
      properties:
        version:
          type: string
          description: "The schema version of the manifest."
        sessionId:
          type: string
          description: "A unique, timestamp-based ID for the generation run."
        generated_by:
          type: string
          description: "The alias of the persona that created the plan."
        actions:
          type: array
          description: "A sequential list of action objects to be executed."
          items:
            type: object
            required: ["type", "comment"]
            properties:
              type:
                type: string
                description: "The action to perform (e.g., 'create_branch', 'apply_file_change')."
              comment:
                type: string
                description: "The AI's 'thought' or rationale for the action."
            # Allows for other action-specific fields like 'branch_name', 'path', etc.
            additionalProperties: true

  - name: Governance Rules
    path: "src/ai_assistant/internal_data/governance.yml"
    type: YAML File
    description: "The single source of truth for governance rules (e.g., lists of keywords, configuration constants) that must be shared between the application's runtime code and its documentation generation scripts to prevent drift."
    schema:
      - field: prompting_best_practices
        type: dict
        description: "Contains rules related to user prompting."
      - field: risky_modification_keywords
        type: list of strings
        description: "The canonical list of keywords that trigger a safety warning in the CLI."
  
# SECTION 2: TRANSIENT PROCESS ARTIFACTS
# These contracts define the structure of temporary or ephemeral files that hold
# the state for a specific, transient workflow. They are critical for the duration
# of the workflow but are not part of the application's long-term persistent state.
process_artifacts:
  - name: Project State File
    path: "PROJECT_STATE.md"
    type: Markdown File
    lifecycle: "Created by the pmo-1 persona at the start of a multi-agent project. It is intended to be deleted upon project completion."
    description: "The single source of truth for a long-running, multi-agent project. It is created and managed by the `pmo-1` persona to maintain state across multiple CLI invocations."
    schema:
      - field: metadata
        type: Key-Value List
        description: "Contains high-level project status, version, and the original goal."
      - field: Project Plan
        type: Markdown Section
        description: "Defines the sequence of phases, the specialist persona assigned to each, and their dependency relationships."
      - field: Artifact Sections
        type: Markdown Sections
        description: "Dedicated sections (e.g., 'Requirements', 'Architecture') that are populated by specialist personas as the project progresses."