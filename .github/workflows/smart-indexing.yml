# .github/workflows/smart-indexing.yml

name: Smart RAG Indexing

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'release/**'
    paths-ignore:
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      force_reindex:
        description: 'Force complete reindexing'
        required: false
        type: boolean
        default: false

concurrency:
  group: indexing-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write

env:
  OCI_NAMESPACE: ${{ vars.OCI_NAMESPACE }}
  OCI_BUCKET: ${{ vars.OCI_BUCKET }}
  OCI_REGION: ${{ vars.OCI_REGION }}
  BRANCH_NAME: ${{ github.ref_name }}

jobs:
  index-codebase:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout Project Repository
        uses: actions/checkout@v4

      - name: Checkout AI Assistant Repository
        uses: actions/checkout@v4
        with:
          repository: venoajie/my-ai-assistant
          ref: develop
          path: my-ai-assistant

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        # This installs the uv binary and makes it available in the PATH
        
      - name: Configure uv Cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        # This is the key step: it caches uv's global directory, which is much
        # more effective than pip's cache for CI.

      - name: Install All Dependencies with uv
        run: |
          # Use 'uv pip install' as a drop-in replacement for 'pip install'
          uv pip install -e ./my-ai-assistant[indexing]
          uv pip install oci-cli
          
      - name: Configure Oracle Cloud CLI
        env:
          OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING: true
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ env.OCI_REGION }}
          key_file=~/.oci/api_key.pem
          EOF
          
          echo "${{ secrets.OCI_API_KEY }}" > ~/.oci/api_key.pem
          chmod 600 ~/.oci/api_key.pem
          chmod 600 ~/.oci/config
          
          oci os ns get
        
      - name: Download Previous Index (for incremental update)
        id: download_previous
        run: |
          INDEX_DIR=".ai_rag_index"
          echo "Attempting to download previous index to enable smart indexing..."
          oci os object get --namespace "${OCI_NAMESPACE}" --bucket-name "${OCI_BUCKET}" --name "indexes/${BRANCH_NAME}/latest/index.tar.gz" --file index.tar.gz || true
          
          if [ -f "index.tar.gz" ]; then
            echo "Previous index found. Unpacking for incremental update."
            mkdir -p "${INDEX_DIR}"
            tar -xzf index.tar.gz -C "${INDEX_DIR}"
            echo "unpacked=true" >> $GITHUB_OUTPUT
          else
            echo "No previous index found. A full re-index will be performed."
            echo "unpacked=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine Indexing Mode
        id: mode
        run: |
          if [[ "${{ github.event.inputs.force_reindex }}" == "true" ]]; then
            echo "mode=full" >> $GITHUB_OUTPUT
          else
            echo "mode=delta" >> $GITHUB_OUTPUT
          fi
      
      # <<< FIX: Add this new step to satisfy the Pydantic validation >>>
      - name: Create CI-Specific AI Config
        run: |
          cat > .ai_config.yml << EOF
          # This file provides the minimum required configuration for the CI indexing job.
          tools:
            shell:
              allowed_commands: [] # The indexer doesn't use the shell tool, so an empty list is fine.
          EOF
          echo "Created .ai_config.yml to satisfy config validation."

      - name: Run Indexer
        run: |
          ai-index . \
            --branch "${{ env.BRANCH_NAME }}" \
            ${{ steps.mode.outputs.mode == 'full' && '--force-reindex' || '' }}
            
      - name: Upload Index to Object Storage
        run: |
          INDEX_DIR=".ai_rag_index"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          tar -czf index.tar.gz -C "${INDEX_DIR}" .
          
          oci os object put --force \
            --namespace "${OCI_NAMESPACE}" \
            --bucket-name "${OCI_BUCKET}" \
            --name "indexes/${{ env.BRANCH_NAME }}/archive/${TIMESTAMP}_${{ github.sha }}.tar.gz" \
            --file index.tar.gz
          
          oci os object put --force \
            --namespace "${OCI_NAMESPACE}" \
            --bucket-name "${OCI_BUCKET}" \
            --name "indexes/${{ env.BRANCH_NAME }}/latest/index.tar.gz" \
            --file index.tar.gz
          
          echo "::notice::Successfully uploaded index for branch ${{ env.BRANCH_NAME }}"

      - name: Create Failure Issue
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `RAG Indexing Failed for ${{ env.BRANCH_NAME }}`,
              body: `The RAG indexing workflow failed for branch \`${{ env.BRANCH_NAME }}\` at commit ${{ github.sha }}.\n\n[View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            })