# .github/workflows/smart-indexing.yml

name: Smart RAG Indexing

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'release/**'
    paths-ignore:
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      force_reindex:
        description: 'Force complete reindexing'
        required: false
        type: boolean
        default: false

concurrency:
  group: indexing-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write

env:
  OCI_NAMESPACE: ${{ vars.OCI_NAMESPACE }}
  OCI_BUCKET: ${{ vars.OCI_BUCKET }}
  OCI_REGION: ${{ vars.OCI_REGION }}
  BRANCH_NAME: ${{ github.ref_name }}

jobs:
  index-codebase:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout Project Repository
        uses: actions/checkout@v4

      - name: Checkout AI Assistant Repository
        uses: actions/checkout@v4
        with:
          repository: venoajie/my-ai-assistant
          ref: develop
          path: my-ai-assistant

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'


      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          cd my-ai-assistant
          pip install -e .[indexing]
          cd ..
          pip install oci-cli
          
      - name: Configure Oracle Cloud CLI
        env:
          OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING: true
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ env.OCI_REGION }}
          key_file=~/.oci/api_key.pem
          EOF
          
          echo "${{ secrets.OCI_API_KEY }}" > ~/.oci/api_key.pem
          chmod 600 ~/.oci/api_key.pem ~/.oci/config
          
          # Verify OCI connectivity
          oci os ns get > /dev/null
        
      - name: Manage Previous Index
        id: previous_index
        run: |
          INDEX_DIR=".ai_rag_index"
          INDEX_ARCHIVE="indexes/${BRANCH_NAME}/latest/index.tar.gz"
          
          # Clean any existing index directory
          rm -rf "${INDEX_DIR}"
          
          # Try to download previous index
          if oci os object get \
            --namespace "${OCI_NAMESPACE}" \
            --bucket-name "${OCI_BUCKET}" \
            --name "${INDEX_ARCHIVE}" \
            --file index.tar.gz 2>/dev/null; then
            
            mkdir -p "${INDEX_DIR}"
            tar -xzf index.tar.gz -C "${INDEX_DIR}"
            
            # Verify the index is valid
            if [ -f "${INDEX_DIR}/state.json" ] && [ -f "${INDEX_DIR}/chroma.sqlite3" ]; then
              echo "has_valid_index=true" >> "$GITHUB_OUTPUT"
              echo "Index restored successfully"
            else
              echo "has_valid_index=false" >> "$GITHUB_OUTPUT"
              echo "Index files incomplete, will perform full index"
              rm -rf "${INDEX_DIR}"
            fi
          else
            echo "has_valid_index=false" >> "$GITHUB_OUTPUT"
            echo "No previous index found"
          fi

      - name: Run Indexer
        run: |
          # Dynamic .aiignore for CI
          echo "my-ai-assistant/" >> .aiignore
          
          # Determine mode
          if [[ "${{ github.event.inputs.force_reindex }}" == "true" ]] || [[ "${{ steps.previous_index.outputs.has_valid_index }}" != "true" ]]; then
            echo "Running full index..."
            ai-index . --branch "${{ env.BRANCH_NAME }}" --force-reindex
          else
            echo "Running incremental index..."
            ai-index . --branch "${{ env.BRANCH_NAME }}"
          fi

      - name: Upload Index to Object Storage
        if: success()
        run: |
          # Create archive
          tar -czf index.tar.gz -C .ai_rag_index .
          
          # Upload with versioning
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Upload timestamped version (for history)
          oci os object put \
            --namespace "${OCI_NAMESPACE}" \
            --bucket-name "${OCI_BUCKET}" \
            --name "indexes/${BRANCH_NAME}/${TIMESTAMP}/index.tar.gz" \
            --file index.tar.gz
          
          # Upload as latest (for next run)
          oci os object put \
            --namespace "${OCI_NAMESPACE}" \
            --bucket-name "${OCI_BUCKET}" \
            --name "indexes/${BRANCH_NAME}/latest/index.tar.gz" \
            --file index.tar.gz \
            --force
          
          # Upload manifest for debugging
          if [ -f ".ai_rag_index/index_manifest.json" ]; then
            oci os object put \
              --namespace "${OCI_NAMESPACE}" \
              --bucket-name "${OCI_BUCKET}" \
              --name "indexes/${BRANCH_NAME}/latest/manifest.json" \
              --file .ai_rag_index/index_manifest.json \
              --force
          fi
          
          echo "Index uploaded successfully"
          
      - name: Create Failure Issue
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `RAG Indexing Failed for ${{ env.BRANCH_NAME }}`,
              body: `The RAG indexing workflow failed for branch \`${{ env.BRANCH_NAME }}\` at commit ${{ github.sha }}.\n\n[View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            })