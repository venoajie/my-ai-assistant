# .github/workflows/smart-indexing.yml

name: Smart RAG Indexing (PostgreSQL)

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'release/**'
    paths-ignore:
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      force_reindex:
        description: 'Force complete reindexing'
        required: false
        type: boolean
        default: false

concurrency:
  group: indexing-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write

env:
  OCI_NAMESPACE: ${{ vars.OCI_NAMESPACE }}
  OCI_BUCKET: ${{ vars.OCI_BUCKET }}
  OCI_REGION: ${{ vars.OCI_REGION }}
  BRANCH_NAME: ${{ github.ref_name }}
  PROJECT_NAME: ${{ github.event.repository.name }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  index-codebase:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout Project Repository
        uses: actions/checkout@v4

      - name: Checkout AI Assistant Repository
        uses: actions/checkout@v4
        with:
          repository: venoajie/my-ai-assistant
          ref: develop
          path: my-ai-assistant

      - name: Create Dynamic .aiignore for CI
        run: |
          echo "my-ai-assistant/" >> .aiignore
          echo "indexer_run.log" >> .aiignore

      - name: Setup Python and uv
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Configure uv Cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          
      - name: Create Venv and Install Dependencies
        run: |
          uv venv
          source .venv/bin/activate
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH          
          uv pip install --no-cache -e ./my-ai-assistant[indexing]
          uv pip install --no-cache oci-cli
          
      - name: Configure Oracle Cloud CLI
        run: |
          mkdir -p ~/.oci
          echo "[DEFAULT]" > ~/.oci/config
          echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
          echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
          echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
          echo "region=${{ env.OCI_REGION }}" >> ~/.oci/config
          echo "key_file=~/.oci/api_key.pem" >> ~/.oci/config
          echo "${{ secrets.OCI_API_KEY }}" > ~/.oci/api_key.pem
          chmod 600 ~/.oci/api_key.pem ~/.oci/config
        
      - name: Download Previous State File for Incremental Indexing
        id: download_state
        run: |
          STAGING_DIR=".ai_rag_index"
          mkdir -p "${STAGING_DIR}"
          STATE_FILE="${STAGING_DIR}/state.json"
          
          echo "Attempting to download previous state.json..."
          
          # Attempt download. If it fails (e.g., 404), the 'oci' command will return non-zero.
          # We capture the exit code to decide if it was successful.
          if oci os object get \
            --namespace "${OCI_NAMESPACE}" \
            --bucket-name "${OCI_BUCKET}" \
            --name "indexes/${PROJECT_NAME}/${BRANCH_NAME}/latest/state.json" \
            --file "${STATE_FILE}" \
            --auth api_key; then
            
            echo "✅ Previous state.json downloaded successfully."
            echo "state_exists=true" >> "$GITHUB_OUTPUT"
          else
            # OCI command failed (e.g., 404). This is expected for a new index.
            echo "No previous state.json found or download failed. A full re-index will be performed."
            echo "state_exists=false" >> "$GITHUB_OUTPUT"
            # Ensure the file is not present if download failed
            rm -f "${STATE_FILE}"
          fi
        shell: /usr/bin/bash -e {0}

      - name: Determine Indexing Mode
        id: mode
        run: |
          if [[ "${{ github.event.inputs.force_reindex }}" == "true" ]]; then
            echo "Forcing full re-index due to manual trigger."
            echo "mode=full" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.download_state.outputs.state_exists }}" == "true" ]]; then
            echo "Previous state found. Performing delta index."
            echo "mode=delta" >> $GITHUB_OUTPUT
          else
            echo "No previous state. Performing full re-index."
            echo "mode=full" >> $GITHUB_OUTPUT
          fi

      - name: Run Indexer
        id: indexer_run
        run: |
          # --- Ensure that a failure in the python script fails the entire step ---
          set -o pipefail

          INDEXER_ARGS=""
          if [[ "${{ steps.mode.outputs.mode }}" == "full" ]]; then
            INDEXER_ARGS="--force-reindex"
            echo "::notice::Starting indexer in FULL RE-INDEX mode."
          else
            echo "::notice::Starting indexer in DELTA (incremental) mode."
          fi
          
          python -m ai_assistant.indexer . --branch "${{ env.BRANCH_NAME }}" $INDEXER_ARGS 2>&1 | tee indexer_run.log
          
      - name: Sanity Check Indexing Results
        if: steps.indexer_run.outcome == 'success'
        run: |
          echo "::group::Performing Sanity Check on Indexing Output"
          STATE_FILE=".ai_rag_index/state.json"
          if [ ! -f "$STATE_FILE" ]; then
            echo "::error::Sanity check failed! state.json was not created by the indexer."
            exit 1
          fi
          
          FILE_COUNT=$(jq '. | length' "$STATE_FILE")
          MINIMUM_EXPECTED_FILES=100

          echo "Files in final state: $FILE_COUNT"
          echo "Minimum expected: $MINIMUM_EXPECTED_FILES"

          if [ "$FILE_COUNT" -lt "$MINIMUM_EXPECTED_FILES" ]; then
            echo "::error::Sanity check failed! The number of indexed files is suspiciously low."
            exit 1
          else
            echo "✅ Sanity check passed."
          fi
          echo "::endgroup::"
          
      - name: Upload Indexer Log Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: indexer-log-${{ github.sha }}
          path: indexer_run.log

      - name: Create Failure Issue
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `RAG Indexing Failed for ${{ env.BRANCH_NAME }}`,
              body: `The RAG indexing workflow failed for branch \`${{ env.BRANCH_NAME }}\` at commit ${{ github.sha }}.\n\n[View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            })